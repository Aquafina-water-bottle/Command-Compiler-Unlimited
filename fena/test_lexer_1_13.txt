# all round brackets () are only used when:
# defining execute shortcut
# surrounding coords
# surrounding a selector argument value
# creating a selector group

# selector -> as(selector) -> as selector
# vec3 -> pos(vec3) -> positioned vec3
# pos(selector) -> positioned as selector
# at(feet) -> anchored feet positioned ^ ^ ^
# at(eyes) -> anchored eyes positioned ^ ^ ^
# at(selector) -> at selector
# at(axes) -> align axes (axes = combination of xyz)
# at(vec3 vec2) -> positioned vec3 facing vec2
# facing(vec3) -> facing vec3
# facing(selector) -> facing(selector feet) -> facing selector feet
# facing(selector eyes) -> facing selector eyes
# rot(selector) -> rotated as selector
# rot(vec2) -> rotated vec2
# anchor(feet) -> anchored feet
# anchor(eyes) -> anchored eyes
# in(dimension) -> in dimension
# ast(selector) -> as selector at @s

# if(selector) -> if entity selector
# if(block_type) -> if(block_type ~ ~ ~)
# if(block_type vec3) -> if block vec3 block_type
# if(vec3 vec3 == vec3) -> if(vec3 vec3 == vec3 all) -> if blocks vec3 vec3 vec3 all
# if(vec3 vec3 == vec3 masked) -> if blocks vec3 vec3 vec3 masked
# if(target objective operator target2 objective2) -> if score target objective operator target2 objective
# if(target objective == int) -> if score target objective matches int
# if(target objective < int) -> if score target objective matches ..(int-1)
# if(target objective <= int) -> if score target objective matches ..(int)
# if(target objective > int) -> if score target objective matches (int+1)..
# if(target objective >= int) -> if score target objective matches (int)..
# if(target objective in int..int) -> if score target objective matches int..int
# unless(...) -> ifnot(...) -> (Literally any if statement but replace "if" with "unless")

# note that auto_type = smallest stored value for integers, double when integer
# eg. 6 -> byte, 8234 -> short, 628137057 -> int, 2345766241356 -> long, 36.73461 and 5.0 -> double
# result(vec3 data_path scale) -> store result block vec3 data_path auto_type scale
# success(vec3 data_path scale) -> store success block vec3 data_path auto_type scale
# result(selector data_path scale) -> store result entity selector data_path auto_type scale
# success(selector data_path scale) -> store success entity selector data_path auto_type scale

# result(vec3 data_path type scale) -> store result block vec3 data_path type scale
# success(vec3 data_path type scale) -> store success block vec3 data_path type scale
# result(selector data_path type scale) -> store result entity selector data_path type scale
# success(selector data_path type scale) -> store success entity selector data_path type scale

# result(bossbar_id max) -> store result bossbar bossbar_id max
# result(bossbar_id value) -> store result bossbar bossbar_id value
# success(bossbar_id max) -> store success bossbar bossbar_id max
# success(bossbar_id value) -> store success bossbar bossbar_id value
# result(selector objective) -> store result score selector objective
# success(selector objective) -> store success score selector objective

!mfunc execute_test
    @p ~2 ~1 ~-1 at(@a) 3 5.2 -2 @s @r if(2 ~-1 ~ stone_brick) @e if(stone_brick): say @a
    
    # @s @r -> execute as @s as @r ...
    # pos(@p) -> execute positioned as @p ...
    # rot(@a) -> execute rotated as @a ...
    # 3 5.2 -2 -> execute positioned 3 5.2 -2 ...
    pos(@p) rot(@a) 3 5.2 -2 @s @r:

        # if(@a) -> execute if entity @a ...
        # if(stone_brick) -> execute if block ~ ~ ~ stone_brick ...
        # in(nether) -> execute in nether ...
        if(@a) if(stone_brick) @e in(nether): say @a
        if(@a, stone_brick) @e in(nether): say @a

        # if(@r _ti == @s _st) -> execute if score @r _ti = @s _st ...
        # if(stone_brick ~ ~-1 ~) -> execute if block ~ ~-1 ~ stone_brick
        # if(@r _ti == @s _st, stone_brick ~ ~-1 ~) -> execute if score @r _ti = @s _st if block ~ ~ ~ stone_brick ...
        # at(feet) -> execute anchored feet ...
        if(@r _ti == @s _st, stone_brick ~ ~-1 ~) at(feet): say @a
        
        # ifnot(stone_brick 2 3 4 3 4 5) -> execute unless block 2 3 4 3 4 5 stone_brick ...
        # at(@a) -> execute at @a ...
        ifnot(stone_brick 2 3 4 3 4 5) at(@a; feet): say @a

    # at(xy) -> execute align xy ...
    # facing(2 3 4) -> execute facing 2 3 4 ...
    # facing(@r) -> facing(@r feet) -> execute facing @r feet...
    # facing(@r eyes) -> execute facing @r eyes...
    at(xy) ~3 ~2 ~5 facing(2 3 4, @r feet, @r): say @a

    # rot(7, ~3) -> execute rotated 7 ~3 ...
    # ast(@s[_tag]) -> execute as @s[_tag] at @s ...
    # result(@s _af) -> execute store result score @s _af ...
    rot(7 ~3) ast(@s[_tag]) result(@s _af): say @a

    # note that some execute commands don't require a leading command to still be a functional command
    @a result(@s _pl) if(@e[type=pig])

    # and scoreboard shortcuts can start with selectors too
    @s _tp + 1

    # success(~ ~ ~ Items[0].Count 2) -> execute store success block ~ ~ ~ Items[0].Count byte 2 run ...
    success(~ ~ ~ Items[0].Count 2): say @a

    # automatically assigns the type
    # if there are no decimals, it assigns it to the lowest numeric type
    # if there are, it autmomatically assigns double precision
    # result(@s Attributes[0].Base 5) -> execute store result entity @s Attributes[0].Base byte 5 ...
    # result(@s Attributes[1].Base 2.5) -> execute store result entity @s Attributes[1].Base double 2.5 ...
    # result(@s Attributes[2].Base int 2.5) -> execute store result entity @s Attributes[1].Base int 2.5 ...
    result(@s Attributes[0].Base 5, @s Attributes[1].Base 2.5, @s Attributes[2].Base int 2.5): say @a

    # note that data merge requires the entire nbt tag, while execute store result entity just requires a position and integer
    # execute store result score @s a run data get entity @e[type=pig,limit=1] Attributes[0].Base 2
    # execute store result entity @e[type=pig,limit=1] Attributes[0].Base double 2 say @s

    # to store bossbar, note that we have to store either max or value too
    # result(minecraft:green max) -> execute store result bossbar minecraft:green max ...
    # success(idk value) -> execute store success bossbar minecraft:idk value ...


!mfunc selector_test
    # @a[advancements={minecraft:story/mine_diamond={diamond=true},minecraft:story/iron_tools=true}]
    # naturally @a[advancements={story/mine_diamond={diamond=true},story/iron_tools=true}]

# Note that bossbars are actually extremely weird
# They have almost the same purpose as scoreboard objectives setdisplay

!mfunc objectives_test
    # format:
    # _name . display
    # _ . _

    # first _ are prefix
    # . means "dummy", everything else should be specified
    # third _ is the given display name

!mfunc bossbar_test
    # all possible options: get, set, create, remove, list
    # bossbar add <id> <name>
    # bossbar remove <id>
    # id has a default prefix of minecraft if not specified (test, minecraft:test, bh_hd:test)
    # name is json and required: python shortcut allows name to be exactly the same as the id without prefix

    # whilst scoreboard has add/remove, bossbar has create/remove
    # bossbar shortcut for adding and removing: add -> create

    # bossbar get <id> max -> integer
    bossbar _lol <- max
    # bossbar get <id> value -> integer
    bossbar _lol <- value
    # bossbar get <id> players -> displays all players ??? (can it be useful to detect any players who are in the bossbar?)
    bossbar _lol <- players
    # bossbar get <id> vlsible -> boolean 0, 1
    bossbar _lol <- visible

    # bossbar set <id> color <color>
    # color ::= ["white", "pink", "red", "yellow", "green", "blue", "purple"]
    # with "white" as default
    # bossbar set _lol color red
    bossbar _lol color = red

    # bossbar set <id> name <name>
    # name ::= json
    # bossbar set _lol name {"text":"asdf"}
    bossbar _lol name = asdf
    bossbar _lol name = {"text":"asdf"}

    # bossbar set <id> players <players>
    # players ::= selector, STR
    # bossbar set _lol players @a
    bossbar _lol players = @a

    # bossbar set <id> style <style>
    # style ::= {"0": "progress", "6": "notched_6", "10": "notched_10", "12": "notched_12", "20": "notched_20"}
    # with "progress" as default
    # such that notched x has that many lines in between the bar, and progress has no lines
    # bossbar set _lol style progress
    # bossbar set _lol style notched_12
    bossbar _lol style = 0
    bossbar _lol style = 12

    # bossbar set <id> value <value>
    # value ::= INT
    # bossbar set value _lol 5
    bossbar _lol value = 5
    
    # bossbar set <id> max <max>
    # max ::= INT
    # bossbar set max _lol 5
    bossbar _lol max = 5

    # bossbar set <id> visible <true, false>
    bossbar _lol visible = true
    bossbar _lol visible = false

!mfunc data_test
    # data get block <vec3> [path] [scale]
    # data <vec3> <- [path] [scale]
    data (~ ~ ~) <-
    data (23 102 64) <- Items.0
    data 23 102 64 <- Items.0 100

    # data get entity <selector> [path] [scale]
    # data <selector> <- [path] [scale]
    data @e[type=armor_stand,limit=1] <- 
    data @e[type=armor_stand,limit=1] <- Movement.2
    data @e[type=armor_stand,limit=1] <- Movement.2 100

    # data merge block <vec3> <nbt>
    # data <vec3> + {SomeNBT:5b}
    # data <vec3> + {SomeNBT:5b}

    # data merge entity <selector> <nbt>
    # data <selector> + <nbt>
    data @e[type=pig,c=1] + {SomeNBT:5b}

    # data remove block <vec3> <path>
    # data <vec3> - <path>
    data (~ ~ ~) - Items.0

    # data remove entity <selector> <path>
    # data <selector> - <path>
    data @e[type=item,c=1] - Movement.2

!mfunc effect_test
    # effect clear <selector>
    # effect clear @a
    effect @a - all

    # effect clear <selector> <effect>
    # effect @a - minecraft:saturation
    # effect clear @a minecraft:saturation
    effect @a - saturation

    # effect give <selector> <effect> <seconds> <amplifier> <hideParticles>
    # effect <selector> + <effect> [seconds] [amplifier] [hideParticles=true]
    # effect give @a minecraft:saturation 10000000 0 true
    effect @a + saturation 1000000 0

    # effect give @a minecraft:saturation 10000000 0 false
    effect @a + saturation 1000000 false

!mfunc scoreboard_test
    @a _ti - 1
    @a _ti = 10
    @a reset _ti
    @a enable _ti
    @a get _ti
    @a + _timer
    @a - _timer
    team add _d_y display yellow
    team @a + _d_y
    team leave @a
    team empty _d_y
    team remove _d_y

!mfunc tags_test
    # tag <selector> add <tag>
    # tag <selector> + <tag>
    tag @e[type=pig,name=test] + _lol

    # tag <selector> remove <tag>
    # tag <selector> - <tag>
    tag @e[type=pig,name=test] - _lol

!mfunc team_test
    # team add <team> <display_name> (no shortcut)
    team add _team team_test

    # team empty <team> (no shortcut)
    team empty _team
    
    # team join <team> <targets>
    # team join team_name @a
    team team_name += @a

    # team leave <targets> (no shortcut)
    team leave @a

    # team option <option> <value>
    # all are defined under team_options.json
    team _team friendlyfire = true
    team _team color = green
    team _team seeFriendlyInvisibles = false
    team _team nametagVisiblity = hideForOwnTeam
    team _team deathMessageVisibility = never
    team _team collisionRule = pushOwnTeam

    # new in 1.13
    team _team prefix = {"text":"PREFIX","color":"blue"}
    team _team suffix = {"text":"SUFFIX","color":"red"}

    # team remove <team> (no shortcut)
    team remove _team

!mfunc xp_test
    # xp add <selector> amount ["levels", "points"]
    # xp query <selector> ["levels", "points"]
    # xp set <selector> amount ["levels", "points"]

    # xp <selector> + INT
    # xp add <selector> INT points
    xp @s + 5

    # xp <selector> + INT levels
    # xp add <selector> INT levels
    xp @s + 5 levels
    
    # xp <selector> - INT
    # xp add <selector> -INT points
    xp @s - 5

    # xp <selector> - INT L
    # xp add <selector> -INT levels
    xp @s - 5 levels


    # xp <selector> <- levels
    # xp query <selector> levels
    xp @s <- levels
    
    # xp <selector> <- points
    # xp query <selector> points
    xp @s <- points

    # xp <selector> = NONNEG_INT
    # xp set <selector> NONNEG_INT points
    xp @s = 0

    # xp <selector> = NONNEG_INT levels
    # xp set <selector> NONNEG_INT points
    xp @s = 0 levels
