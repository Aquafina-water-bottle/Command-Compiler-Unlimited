//(Variable Utils)

IMPORT {LIBRARY v2/checkImport.ccu}
CCU.checkImport(ISIMPORT;general/varUtils)

//<Get Definition Arguments
//=
CCU.getDefArgs(Arr_DefArgs;String)
=//

FUNC {PARSESEP CCU.getDefArgs}:
	ARRAY {Arr_CCUKeywords}:
		GLOBAL
		TEMP
		RETURN
		COORDS
		TELE
		MAX ARGS
		
	DEF $TempString$ |1;1|
	DEF $TempKeywords$
	
	LOOP {1 3 + 1}:
		SPLIT {MAX 1 Arr_Temp $TempString$} { }
		LOOP {Arr_CCUKeywords[S]}:
			SPLIT {MAX 1 Arr_CCUCalc |0|} { }
			IF {Arr_Temp[0] = Arr_CCUCalc[0]}: /// meaning keywords are infront of it
				
				LOOP {1 Arr_CCUCalc[L] + 1}:
					SPLIT {MAX 1 Arr_Temp $TempString$} { }
					
					DEF $TempString$ Arr_Temp[1]	
					IF {$TempKeywords$ = ``}: /// if the current keywords list is blank
						DEF $TempKeywords$ Arr_Temp[0]
					ELSE: /// if the current keywords list isn't blank
						DEF $TempKeywords$ $TempKeywords$ Arr_Temp[0]
						
	SPLIT {MAX 1 Arr_Temp $TempString$} { }
	IF {Arr_Temp[L] = 2}:
		UNASSIGN {ARRAY |0|}
		ARRAY {RETURN |0|}:
			$TempKeywords$
			Arr_Temp[0]
			Arr_Temp[1]
	ELSE:
		UNASSIGN {ARRAY |0|}
		ARRAY {RETURN |0|}:
			$TempKeywords$
			Arr_Temp[0]
			NULL
//>

//<Initialize Variables
//=
true = is global

ARRAY {TEMP ACTIVATE CCU.varsInit(ARGS;true/false) ARGS}:
	`$CCURandDynamicMin$` 3
=//

FUNC {PARSESEP CCU.varsInit}:
	IF {|1| = true}:
		ARRAY {Arr_DefineType}:
			GLOBAL
	ELSE:
		ARRAY {Arr_DefineType}:
			RETURN
			
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[1] = PARSE(Arr_DefArgs[1])}: /// meaning the definition isn't defined yet
			IF {Arr_DefArgs[0] = ``}:
				DEF Arr_DefineType[0] Arr_DefArgs[1] Arr_DefArgs[2]
			ELSE:
				DEF Arr_DefineType[0] Arr_DefArgs[0] Arr_DefArgs[1] Arr_DefArgs[2]
		
//>

//<Set Class Variables
//=
ARRAY {TEMP ACTIVATE CCU.setClassVars(Arr_Name;type) Arr_Name}:
	`$CCURandDynamicMin$`
=//

FUNC {PARSESEP CCU.setClassVars}:
	IF {|1| = ``}:
		ARRAY {Arr_GetType}:
			self
	ELSE:
		ARRAY {Arr_GetType}:
			|1|
		
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
		///	PRINT DEF GLOBAL Arr_DefArgs[0] Arr_GetType[0].Arr_DefArgs[1] PARSE(Arr_DefArgs[1])
			DEF GLOBAL Arr_DefArgs[0] Arr_GetType[0].Arr_DefArgs[1] PARSE(Arr_DefArgs[1])
			LOOP {Arr_DefArgs[1]}:
				UNASSIGN {DEF |0|}
		ELSE:
			DEF GLOBAL Arr_GetType[0].|0;1| PARSE(|0;1|)
			UNASSIGN {DEF |0|}
//>

//<Use Class Variables
//=
ARRAY {TEMP ACTIVATE CCU.useClassVars(Arr_Name;type) Arr_Name}:
	`CCURandDynamicMin`
=//

FUNC {PARSESEP CCU.useClassVars}:
	IF {|1| = ``}:
		ARRAY {Arr_GetType}:
			self
	ELSE:
		ARRAY {Arr_GetType}:
			|1|
		
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
			DEF GLOBAL Arr_DefArgs[0] Arr_DefArgs[1] PARSE(Arr_GetType[0].Arr_DefArgs[1])
		ELSE:
			DEF GLOBAL |0;1| PARSE(Arr_GetType[0].|0;1|)

//>

//<Unuse Class Variables
//=
ARRAY {TEMP ACTIVATE CCU.removeClassVars(Arr_Name) Arr_Name}:
	`CCURandDynamicMin`
=//

FUNC {PARSESEP CCU.unuseClassVars}:
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			//=
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
			=//
			
			LOOP {Arr_DefArgs[1]}:
				UNASSIGN {GLOBAL DEF |0|}
		ELSE:
			UNASSIGN {GLOBAL DEF |0|}
//>


//<Check inside Array
//=
CCU.checkInArray(`$Def$`;CheckString;Arr_Name)
=//

FUNC {PARSESEP CCU.checkInArray}:
	IF {|2|[S] = |2|`[S]`}:
		DEF RETURN |0;1| false
	ELSE:
		LOOP {|2|[S]}:
			IF {|0| = |1;1|}:
				DEF RETURN |0;2| true
		IF {|0| = PARSE(|0|)}:
			DEF RETURN |0;1| false
//>

//<Initialize Arrays
//=
ARRAY {TEMP ACTIVATE CCU.arraysInit(ARGS;true/false) ARGS}:
	Arr_Name 3;2;5
=//
	
FUNC {PARSESEP CCU.arraysInit}:
	IF {|1| = true}:
		ARRAY {Arr_DefineType}:
			GLOBAL
	ELSE:
		ARRAY {Arr_DefineType}:
			RETURN
			
			
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[1]`[S]` = PARSE(Arr_DefArgs[1])[S]}: /// meaning the definition isn't defined yet
			IF {Arr_DefArgs[0] = ``}:
				ARRAY {Arr_DefineType[0] Arr_DefArgs[1]}:
					SPLIT {Arr_Temp Arr_DefArgs[2]} { }
					LOOP {Arr_Temp[S]}:
						|0|
			ELSE:
				ARRAY {Arr_DefineType[0] Arr_DefArgs[0] Arr_DefArgs[1]}:
					SPLIT {Arr_Temp Arr_DefArgs[2]} { }
					LOOP {Arr_Temp[S]}:
						|0|
//>

//<Set Class Arrays
//=
ARRAY {TEMP ACTIVATE CCU.setClassArrays(Arr_Name;type) Arr_Name}:
	`$CCURandDynamicMin$`
=//

FUNC {PARSESEP CCU.setClassArrays}:
	IF {|1| = ``}:
		ARRAY {Arr_GetType}:
			self
	ELSE:
		ARRAY {Arr_GetType}:
			|1|
		
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
			ARRAY {GLOBAL Arr_DefArgs[0] Arr_GetType[0].Arr_DefArgs[1]}:
				LOOP {Arr_DefArgs[1][S]}:
					|0|
					
			LOOP {Arr_DefArgs[1]}:
				UNASSIGN {ARRAY |0|}
		ELSE:
			ARRAY {GLOBAL Arr_GetType[0].|0|}:
				LOOP {|0|[S]}:
					|0|
			UNASSIGN {ARRAY |0|}
//>

//<Use Class Arrays
//=
ARRAY {TEMP ACTIVATE CCU.useClassVars(Arr_Name;type) Arr_Name}:
	`CCURandDynamicMin`
=//

FUNC {PARSESEP CCU.useClassArrays}:
	IF {|1| = ``}:
		ARRAY {Arr_GetType}:
			self
	ELSE:
		ARRAY {Arr_GetType}:
			|1|
		
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
			ARRAY {GLOBAL Arr_DefArgs[0] Arr_DefArgs[1]}:
				LOOP {Arr_GetType[0].Arr_DefArgs[1][S]}:
					|0|
		ELSE:
			ARRAY {GLOBAL Arr_DefArgs[1]}:
				LOOP {Arr_GetType[0].Arr_DefArgs[1][S]}:
					|0|
//>

//<Unuse Class Arrays
//=
ARRAY {TEMP ACTIVATE CCU.removeClassVars(Arr_Name) Arr_Name}:
	`CCURandDynamicMin`
=//

FUNC {PARSESEP CCU.unuseClassArrays}:
	LOOP {|0|[S]}:
		CCU.getDefArgs(Arr_DefArgs;|0|)
		IF {Arr_DefArgs[0] != ``}: // meaning it isn't empty
			//=
			SPLIT {Arr_GetArgsTemp Arr_DefArgs[0]} { }
			LOOP {0 Arr_GetArgsTemp[-1] + 1}:
				DEF $GetArgs$
				IF {Arr_GetArgsTemp[|0|] != GLOBAL}:
					IF {$GetArgs$ = ``}:
						DEF $GetArgs$ Arr_GetArgsTemp[|0;1|]
					ELSE:
						DEF $GetArgs$ $GetArgs$ Arr_GetArgsTemp[|0;1|]
			SET Arr_DefArgs[0] $GetArgs$
			=//
			
			LOOP {Arr_DefArgs[1]}:
				UNASSIGN {GLOBAL ARRAY |0|}
		ELSE:
			UNASSIGN {GLOBAL ARRAY |0|}
//>


//<Change Variables
//=
ARRAY {TEMP ACTIVATE CCU.changeVars(true/false) ARGS}:
	`$ChangeFromVar$` `$ChangeToVar$`
=//

//=
FUNC {PARSESEP CCU.changeVars}:
	IF {|0| = true}:
		LOOP {ARGS[S]}:
			SPLIT {MAX 1 Arr_Temp |0|} { }
			DEF GLOBAL Arr_Temp[1] PARSE(Arr_Temp[0])
			UNASSIGN {DEF Arr_Temp[0]}
	ELSE:
		LOOP {ARGS[S]}:
			SPLIT {MAX 1 Arr_Temp |0|} { }
			DEF Arr_Temp[1] PARSE(Arr_Temp[0])
			UNASSIGN {DEF Arr_Temp[0]}
=//
//>


















