How versioning works:
    s#_#_# refers to the semantic version, which comes with their strict rules
        -this will be used for internal reference since it provides better info for the programmer compared to the public version
    v#_#_# refers to the public version, which is mostly me intrementing the major / minor / patch whenever I feel necessary
        -eg. if this program makes backwards incompatable changes that affects 0.001% of the users,
         I'll update the major in the semantic version, but I'll update either the minor or patch in the public version

s2.0.0		v0.0.0
    Mostly reorganizing a huge chunk of the pascal interpreter
        -Got a logger working
        -Things are in modules now

s3.0.0		v0.0.1
	-Added procedure declarations to the interpreter's GLOBAL_SCOPE
	-Added a bit more documentation to the overall program
	-Moved version history to its own file
	-Changed the main module from s2_0_0 to CCU so I don't have to rename my module every time I update
	-Added an error module for safe keeping
	-Change compound_statement to compound_stmt, and AST to Node because I can

s4.0.0		v0.1.0
    Mid: (Unfinished)
        -Changing the format from pascal to CCU:
            -Changed the _text.txt file to reflect the new format
            -Removed PROGRAM, and allowed the file itself to be its own program
            -Removed BEGIN / END blocks and replaced it with tab spaces
            -Removed VAR (and a specific var declarations block)
            -Changed the order of typing from "name, name: type" to "type name, type name"
            -All keywords are now case sensitive, and must be lowercase

        General changes:
            -Added a list [int, int] as position inside the file to better track errors

    Post:
        -Generally working now

s4.0.1		v0.1.1
    -Fixed a bug with "scoreboard players test", now doesn't have a random execute command

s4.1.0      v0.1.2
    -Integrated pyexpander with the program

s5.0.0      v0.1.3
    -Changed tab spaces to 4 spaces

s5.1.1      v0.2.1
    -Honestly a lot of stuff changed during this time but I forgot to record it
    -The main thing that was changed is how the shortcuts are made, since literally the entirity of interpreter.py was redone
    -Now everything is much more strict and a bit more readable and usable since it used to be almost a 
        one to one port from the old java code, which is just absolutely disgusting

    -Added the function shortcut where you can just type "function name" -> "function ego:EVENT_NAME/name"

s6.0.0      v0.3.0
    -Removed the Common, Post and Mid folders

s7.0.0      v0.4.0
    config/config.ini:
        - Added a version config option to specify "1.12" or "1.13"
        - Removed target_selector_arguments and target_selector_variables and replaced it with selector_arguments and selector_variables in the json file
        - moved to /src/config instead of just being under /src

    config_data.py:
        - Changed all logging errors to syntax error
        - Renamed config options to match up with the wiki https://minecraft.gamepedia.com/Commands#Target_selector_arguments
        - config.ini now supports comments, trailing whitespace and empty lines
        - Changed list of valid options into frozenset because it is only used for containment tests

    token_classes.py: (created)
        - Changed string constants to multiple Enum values (token classes) to better organize the constants
        - Created a bunch of frozenset constants to be used for containment tests
            - Contains specifically specific token classes and token types
        - Created a class "TokenValues" which gets all token values given a token class
            - Uses dynamic programming to cache values (maps the token class to the values)
        - Renamed a bunch of token classes to better match up with what token types they represent (Simple or Typed)

    lexical_token.py:
        - Removed a bunch of staticmethods that aren't being used anymore by the token
        - Added a cast method that assumes the type can be properly changed when used
            - Works with both token classes and token types

    token_position.py: (created)
        - Created a TokenPosition class
            - Prevents confusion between the line number and the column number of the previous representation (a tuple of two ints)
            - Stores more attributes to allow representation of a range of chars
        - Created a TokenPositionRecorder class:
            - Mutable version of the TokenPosition class used in during the tokenizing process
            - Does the main locking and unlocking of the char position

    lexer.py:
        - Fixed a glitch involving whitespace on empty lines
        - Fixed a glitch involving no empty line at the end of the file
            - Redo how newlines are converted to tab space tokens
        - Changed into an iterator which allows all possible lexing to be done within this class
            - There is no need for common lexers anymore
            - All commands, selectors and nbt tags will be separated into its own tokens
        - Added some new delimiter tokens as ":", ",", "(" and ")" for execute and chained commands

    scoped_symbol_table.py: (created)
        - Created an object to handle basic information gotten from statements
            - General handling is separated from the original parser
        - Contains:
            - all folders to the mcfunction
            - current mcfunction
            - prefix
            - constobj
            - current command builder

    parser.py:
        - Added a !folder statement block to define what file all the defined mcfunctions will be in
        - Added a one liner !prefix statement to determine what prefix will be used throughout the file
        - Added a one liner !constobj statement to determine what objective name will be used for operations with constant numbers
            - eg. "@s _ti * 5" requires an objective for scoreboard players operation, which wiil be defined with !constobj
        - Added a command chain option by having a command end with ":" and starting as a new block -> REMOVED
            - Equivalent to CBP or CCUv1 "USE"

    builder.py: (created)
        - Made a simple class that all builders must inherit from
            - Requires all builder classes to have the "build" method

    coord_utils.py: (created)
        - Made a bunch of functions to assist in validating coord types from strings and tokens

    coroutine.py: (created)
        - Made a decorator for coroutines (might not be used due to asyncio maddness)

    in_file_config.py: (created)
        - Singleton class to hold information gotten from the parser:
            - objectives dict (maps no prefix to prefix)
            - tags dict (maps no prefix to prefix)
            - teams dict (maps no prefix to prefix)
            - functions dict (maps shortcut to minecraft path)
            - constobj (str from !constobj)
            - prefix (str from !prefix)

    nodes.py: (created)
        - Made a node class to be inherited from all other node classes
            - Only an ABC class with no abstract methods
        - Node visitor class taken straight from the tutorial

    command_builder.py: (created)
        - Added a bunch of builder classes (command, execute, scoreboard, function, simplecommand)
            - The general command builder class will have all class vars moved to in_file_config.py

    commands.py: (created)
        - Might be deleted

    terminology.txt: (created)
        - Created a general list of terms that will remain constant throughout the code documentation and naming conventions

    config/selector_1.12.json, config/selector_1.13.json: (created)
        - Holds all config data specifically for selector based things for 1.12
            - json is used instead of a regular ini because more complex formatting is required (lists and dicts)

    config/blocks_1.12.txt, config/blocks_1.13.txt,
    config/commands_1.12.txt, config/commands_1.13.txt,
    config/entities_1.12.txt, config/entites_1.13.txt: (created):
        - Holds all data as said by the file name (formatted with each line being a valid item)

    token_types.py: (created -> renamed to token_classes.py)
        - Renamed after setting the terminology.txt as the standard across all files

    constants.py: (DELETED)
        - Replaced with token_types.py and config_data.py

    lexical_token_immutable_bak.py: (created -> DELETED)
        - Backup version of prototype immutable token
        - Was later scrapped because casting would change the physical token and that has to be mutable

    common_lexer.py: (created -> DELETED)
        - Added a prototype lexer to be used by tokenizing datatags and selectors
        - Made it inherit ABC

    common_parser.py: (created -> DELETED)
        - Added a prototype parser to be used for parsing datatags and selectors

    statement_lexer.py: (created -> DELETED)
        - Added a lexer specifically for converting a statement line into their respective tokens

    command_lexer.py: (created -> DELETED)
        - Lexer specifically for getting tokens in a command

    command_parser.py: (created -> DELETED)
        - parser specifically for commands

    selector_config.json: (created -> DELETED)
        - Holds all config data specifically for selector based things
            - json is used instead of a regular ini because more formatting is required (lists and dicts)

    TODO:
        - Revamp parser into making a parse tree and interpreter class
            - Get the prefix, constobj and function file paths through a global symbol table node visitor
            - Get commands and mcfunctions through the regular interpreter node visitor
        - Remove a bunch of useless files once the parser is done
        - Make the writer work (doesn't require anything else to work other than having a McFunction object)
        - Command line arguments:
            - Debug file only when "-l" or "--debug-log"
            - Specify custom version under "-v" or "--version" as 1.12 or 1.13 that overrides the config specification

        1.13:
            - Change format of execute commands to use ":" and all sub execute commands
            - mcfunction format in datapacks (different namespace)
