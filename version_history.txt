How versioning works:
    s#_#_# refers to the semantic version, which comes with their strict rules
        -this will be used for internal reference since it provides better info for the programmer compared to the public version
    v#_#_# refers to the public version, which is mostly me intrementing the major / minor / patch whenever I feel necessary
        -eg. if this program makes backwards incompatable changes that affects 0.001% of the users,
         I'll update the major in the semantic version, but I'll update either the minor or patch in the public version

s2.0.0		v0.0.0
    Mostly reorganizing a huge chunk of the pascal interpreter
        -Got a logger working
        -Things are in modules now

s3.0.0		v0.0.1
	-Added procedure declarations to the interpreter's GLOBAL_SCOPE
	-Added a bit more documentation to the overall program
	-Moved version history to its own file
	-Changed the main module from s2_0_0 to CCU so I don't have to rename my module every time I update
	-Added an error module for safe keeping
	-Change compound_statement to compound_stmt, and AST to Node because I can

s4.0.0		v0.1.0
    Mid: (Unfinished)
        -Changing the format from pascal to CCU:
            -Changed the _text.txt file to reflect the new format
            -Removed PROGRAM, and allowed the file itself to be its own program
            -Removed BEGIN / END blocks and replaced it with tab spaces
            -Removed VAR (and a specific var declarations block)
            -Changed the order of typing from "name, name: type" to "type name, type name"
            -All keywords are now case sensitive, and must be lowercase

        General changes:
            -Added a list [int, int] as position inside the file to better track errors

    Post:
        -Generally working now

s4.0.1		v0.1.1
    -Fixed a bug with "scoreboard players test", now doesn't have a random execute command

s4.1.0      v0.1.2
    -Integrated pyexpander with the program

s5.0.0      v0.1.3
    -Changed tab spaces to 4 spaces

s5.1.1      v0.2.1
    -Honestly a lot of stuff changed during this time but I forgot to record it
    -The main thing that was changed is how the shortcuts are made, since literally the entirity of interpreter.py was redone
    -Now everything is much more strict and a bit more readable and usable since it used to be almost a 
        one to one port from the old java code, which is just absolutely disgusting

    -Added the function shortcut where you can just type "function name" -> "function ego:EVENT_NAME/name"

s6.0.0      v0.3.0
    -Removed the Common, Post and Mid folders

s7.0.0      v0.4.0
    config_data.py:
        - Changed all logging errors to syntax error
        - Renamed config options to match up with the wiki https://minecraft.gamepedia.com/Commands#Target_selector_arguments
        - config.ini now supports comments, trailing whitespace and empty lines

    constants.py: (removed)
        - Replaced with token_types.py and config_data.py

    token_types.py: (created)
        - Changed string constants to multiple Enum values to better organize the constants
        - Created a bunch of frozenset constants to be used for containment tests

    lexical_token.py:
        - Removed a bunch of staticmethods that aren't being used anymore by the token
        - Added a cast method that assumes the type can be properly changed when used

    token_position.py: (created)
        - Created a TokenPosition class
            - Prevents confusion between the line number and the column number of the previous representation (a tuple of two ints)
            - Stores more attributes to allow representation of a range of chars
        - Created a TokenPositionRecorder class:
            - Mutable version of the TokenPosition class used in during the tokenizing process
            - Does the main locking and unlocking of the char position

    lexical_token_immutable_bak.py: (created)
        - Backup version of prototype immutable token
        - Was later scrapped because casting would change the physical token and that has to be mutable

    lexer.py:
        - Essentially converted most possible tokens into TokenType.COMMAND instead of automatically assuming what type they are
            - The exception is the statements, which are separated into their own tokens
        - Fixed a glitch involving whitespace on empty lines
        - Fixed a glitch involving no empty line at the end of the file
            - Redo how newlines are converted to tab space tokens
        - Separated the lexing part of the selector and made it into its own common_lexer.py
        - Added some new delimiter tokens as ":", ",", "(" and ")" for execute and chained commands

    scoped_symbol_table.py: (created)
        - Created an object to handle basic information gotten from statements
            - General handling is separated from the original parser
        - Holds the current mcfunction, prefix, file path, constobj name and command slices by chained commands

    parser.py:
        - Added a !folder statement block to define what file all the defined mcfunctions will be in
        - Added a one liner !prefix statement to determine what prefix will be used throughout the file
        - Added a one liner !constobj statement to determine what objective name will be used for operations with constant numbers
            - eg. "@s _ti * 5" requires an objective for scoreboard players operation, which wiil be defined with !constobj
        - Added a command chain option by having a command end with ":" and starting as a new block
            - Equivalent to CBP or CCUv1 "USE"
        - Changed a few methods to better match up to the grammar definition

    common_lexer.py: (created)
        - Added a prototype lexer to be used by tokenizing datatags and selectors
        - Made it inherit ABC

    common_parser.py: (created)
        - Added a prototype parser to be used for parsing datatags and selectors

    statement_lexer.py: (created)
        - Added a lexer specifically for converting a statement line into their respective tokens

    TODO:
        - Change from camel case to snake case
        - Clean up error logging
        - Rename certain variables based on selectors to match the wiki https://minecraft.gamepedia.com/Commands#Target_selector_arguments
        - Debug file only when "-l" or "--debug-log" is used as a command line argument
        - WHY HAVEN'T I THOUGHT OF THIS YET:
            - Turn all lexers into iterators
            - Build each command using a pipeline of iterators (nested for loop with yield)

        1.13:
            - Change format of execute commands to use ":" and all sub execute commands
            - mcfunction format in datapacks
