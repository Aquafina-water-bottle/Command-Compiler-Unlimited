//(Testing)
///	C:\Users\Austin\Documents\Austin\powder game code\eGO\Events & Commands\CCU - Command Combiner Unlimited\tests\test.ccu

//<Definitions
DEF ASDF DANK
DEF DANK MEMES 5
DEF GLOBAL aFloat 3333333333.1111111111111111111111
DEF GLOBAL COORDS $DankCoords$ 3.11 ~ 0.0000
DEF GLOBAL TELE $DankCoords$ -301 51 930.0 40 0
DEF RandNum 5
DEF ScOP scoreboard players operation
DEF $test$ ScOP @p TEST
DEF $test$ $test$ @p SPtp

DEF def1 def2
DEF def2 def3

DEF $mod$ 0.4

DEF recurring_asdf aRecurringDefinition
DEF aRecurringDefinition aSecondRecurringDefinition
DEF aSecondRecurringDefinition yeah this is recurring_asdf

FUNC {GetRandFunc1}:
	say 1
	say |0|
	say |2|
	
FUNC {GetRandFunc2}:
	say 4
	say 5
	say 6
//>

//<Options	
OPTIONS:
	blockOption stonebrick 0
///	coordsOption 383 69 95

OPTIONS:
///	Style
///	Avaliable options: +X -X +Z -Z (and) height in y
	styleOption +X 16
///	Parse, cmd, compiler
	parseOption true
	commandOption true
	combinerOption true
	filePathFuncOption C:\Users\Austin\Documents\Austin\powder game code\eGO\Server Stuff\1.12\world\data\functions\custom
///	Filepath to MCFunctions
/// Preserve coordinates for each group
	keepCoordsOption false
//>

//<Part A

//=
FUNC {ARGS ACTIVATE CCU.xpNumber}
	say test
=//
//(test)

LOOP {_A;_B;_C}:
	GROUP {Grp_MainGroup|0|}:
		LOOP {1 3 + 1}:
			IF {|0| > 1}:
				say |0| > 1
			GROUP {Grp_AyyLmao|0||0;1|}:
				say |0| |0;1|
			say |0|
		say okay
//>

//<Part B
LOOP {_A;_B;_C}:
	FUNC {Func_test|0|}:
		say |0|
		
ARRAY {GLOBAL Arr_Test}:
	{
		say test lol
		say double
		say ayy lmao
	} {
		say test2
		NULL
		say theSecondDouble2
	}

MFUNC {BRANCH RayCaster/theHunted Main MFunc_MainRaycaster}:
	Func_test|0|
	Func_test_A
	Func_test_B
	Func_test_C
	say THESE
	say ARE
	LOOP {}:
		say found loop null |0|
	LOOP {NULL}:
		say found loop null |0|
	say THE
	
	ARRAY {GLOBAL Arr_Test2}:
		Dog
		Cat
		Lips
		Watermelon
		Apple
		Ocean
		Sword
		Castle
		Car *Vroom Vroom Machine*
		eGO Logo
		Cake
		Corgi
		Winnie the Pooh
		Waffle
		Person
		T-Shirt
		Computer
		Airplane
		Microphone
	
	
	
	Arr_Test[1][1]
	Arr_Test2[S]
	LOOP {0 Arr_Test2[-1] + 1} {1 Arr_Test2[L] + 1}:
		say ayy Arr_Test2[|0|] |1|
		
	UNASSIGN {ARRAY Arr_Test2}
	Arr_Test2[S]
	
	ARRAY {Arr_Test2}:
		a
		s
		d
		f
		
	ARRAY {GLOBAL Arr_Test2}:
		g
		l
		o
		b
		a
		l
		
	Arr_Test2[S]
		
	
	LOOP {0 Arr_Test[-1] + 1}:
		LOOP {0 Arr_Test[|0|][-1] + 1} {1 Arr_Test[|0|][L] + 1}:
			say |0;1| -SPLIT- |0| -SPLIT- |1|
			Arr_Test[|0;1|][|0|]
		say ~SPLIT~
	
	
	LOOP {0 Arr_Test[0][-1] + 1} {1 Arr_Test[0][L] + 1}:
		say |0| |1|
		Arr_Test[0][|0|]
		say Arr_Test[0][L] MARKER
		
	say Arr_Test_Num Arr_Test[L][L]
	
	ARRAY {COORDS Arr_Coords}:
		-62.43 14 421.6
		-64.43 14 421.6
		-66.43 14 421.6
		-68.43 14 421.6
		-68.4 14 415.6
		-66.4 14 415.6
		-64.4 14 415.6
		-62.4 14 415.6
		-13.43 28 313.6
		-137.43 27 315.6
		
	say random coords Arr_Coords[3][x]
	
	//=
	ARRAY {Arr_Recurring}:
		this
		is
		a
		recurring
		Arr_Recurring[4]
		array
		recurring_asdf
	=//
		
///	say recurring Arr_Recurring[4]
///	say recurring_asdf
	
	
	say GREATEST
	DEF COMMANDS Dankest |0| memes |1|
	say COMMANDS(asdf;asdf2) -SPLIT- COMMANDS(more)
	say COMMANDS()
	say COMMANDS
	
	USE {}:
		say this
		say shouldn't
		say have
		say any
		say use
		say stuff
	
	IF { = }:
		say found null
		
	IF { = NULL}:
		say found null
		
	DEF $Null$ NULL
	IF {$Null$ = NULL}:
		say found definition null --> $Null$ <--
	
	say asdf def1 asdf
///	say aRecurringDefinition
	say WOOOOOOOOOOOO
	
	IMPORT {LIBRARY General\utils.ccu}
	CCU.spawnIDSetting
	
	CALL {GetRandFunc1(3;2;10;5), GetRandFunc2, GetRandFunc1, GetRandFunc1()}
	
	//=	test cond
	COND:
		ayy
		lmao
	=//
	
	//=
	comment
	block
	=//
	
	MFUNC {init MFunc_MainInit}:
		say test
		say test
		say test
		IF {1 = 3}:
			say 1 = 3
		IF {1 = 1}:
			say 1 = 1
		say test
		
		IF {asdf = asdf}:
			say MyBoyAsdf
		IF {asdf = notAsdf}:
			say MyBoyNotAsdf
			
	MFUNC {BRANCH test init MFunc_InitTest}:
		say asdf
		say asdf
		say asdf
		say asdf
		
	MFUNC {test MFunc_Test}:
		say asdf2
		say asdf2
		say asdf2
		
		@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa>=0<=71] RRpa + 1
		@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa>=72] RRpa = 1
		
		//=
		CALC(SIN(15.0) * $mod$) CALC(SIN(195.0) * 1.5 + 1.5) CALC(COS(15.0) * $mod$)
		@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa=|0|] particle happyVillager ~CALC(SIN(15.0) * $mod$) ~CALC(SIN(195.0) * 1.5 + 1.5) ~CALC(COS(15.0) * $mod$) 0 0 0 0 0 force
		=//
		
		say SIN(CALC(1 + 44.0)) SIN
		say COS(CALC(1 + 44.0)) COS
		say TAN(CALC(1 + 44.0)) TAN
		
		say SIN((1 + 44.0)) SIN
		say COS((1 + 44.0)) COS
		say TAN((1 + 44.0)) TAN
		
		say SIN(1 + 44.0) SIN
		say COS(1 + 44.0) COS
		say TAN(1 + 44.0) TAN
		
		say SIN(45.0) SIN
		say COS(45.0) COS
		say TAN(45.0) TAN
		
		LOOP {1 72 + 1} {15 1080 + 15.0} {195 1260 + 15.0} {5 360 + 5.0}:
		///	say Tick |0| Angle |1| OppAngle |2| YAngle |3|
			@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa=|0|] particle happyVillager ~CALC(SIN(|1|) * $mod$) ~CALC(SIN(|3|) * 1.5 + 1.5) ~CALC(COS(|1|) * $mod$) 0 0 0 0 0 force
			@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa=|0|] particle happyVillager ~CALC(SIN(|2|) * $mod$) ~CALC(SIN(|3|) * 1.5 + 1.5) ~CALC(COS(|2|) * $mod$) 0 0 0 0 0 force
			
			//=
			@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa=|0|] 'particle happyVillager ~'MUL(SIN(|2|);$mod$)' ~'ADD(MUL(SIN(|6|);1.5);1.5)' ~'MUL(COS(|2|);$mod$)' 0 0 0 0 0 force'
			@e[type=AreaEffectCloud,RRParticle,RRtpo=2,RRpa=|0|] 'particle happyVillager ~'MUL(SIN(|4|);$mod$)' ~'ADD(MUL(SIN(|6|);1.5);1.5)' ~'MUL(COS(|4|);$mod$)' 0 0 0 0 0 force'
			=//
		
	MFUNC {asdf}:
		say theRealAsdf
	
	say YESSSSSSSSSSSSSSSSS
///	setblock Grp_APulse air 0
//>

//<Part C
GROUP {Grp_APulse}:
	say a
	say b
	function MFunc_InitTest
	setblock GSELF air 0

GROUP {PULSE Grp_B}:
	say b
	Arr_Test2[S]
	UNASSIGN {ARRAY Arr_Test2}
	Arr_Test2[S]
	
GROUP {CLOCK Grp_C}:
	say c
	
GROUP {Grp_DClock}:
	say d
	
GROUP {Grp_E}:
	say e
	
GROUP {Grp_F}:
	say f
	
GROUP {Grp_G}:
	say g
	
GROUP {Grp_AyyLmao}:
	setblock Grp_AyyLmao air 0
	say ASDF
	say $DankCoords$[x] MARKER
	say $DankCoords$[(x * 2) + 20] RandCalc
	say $DankCoords$[y] MARKER
	say $DankCoords$[z] MARKER
	say $DankCoords$[ry] MARKER
	say $DankCoords$[rx] MARKER
	FUNC {UnUsedFunc}:
	say 1
	say 2
	say 3
	kill @a[anobjective=3]
	COND:
		testCond
		testCond2
	say 4
	say 5
	
	GROUP {Grp_Test2}:
		say test
		say ABORTMISSION
		DEF GLOBAL ABORTMISSION LiterallyAbortMission
		DEF $SA$ hell yeah
		/// say test
		say $SA$
		say ABORTMISSION
		lmao
		ayy
	say 6
	say 7
	say 8
	say 9
	DEF $Spam$ yas
	GROUP {Grp_Test}:
		say $SA$
		ayy
		say ABORTMISSION
		lmao
		DEF $Spam$ not_yas
		fill Grp_AyyLmao air 0
		say $Spam$
	COND:
		say ABORTMISSION
		say $SA$
		say $Spam$
		say 11
		say 12
		say 13
		say 14
	say 15
	say 16
	say 17
	
	FUNC {Func_goingToActivate}:
		say Ye
		ARGS
		TheGreatestARGS (shouldn't be considered a function)

	FUNC {ACTIVATE Func_goingToActivate ARGS}:
		say ayy
		say lmao
		
	say 18
	Func_goingToActivate
	
	
	FUNC {GLOBAL Func_goingToActivate}:
		asdfasdfsaf
		asdfae564rwe
		d45e
		78y65re7
		6756re
		
	CALL {Func_goingToActivate}

	FUNC {Recurring1}:
		Ayy
		Lmao
		Recurring2
	
	FUNC {Recurring2}:
		Ayy
		Lmao
		Recurring3
		
	FUNC {Recurring3}:
		Ayy
		Lmao
		Recurring1
	
	/// Recurring1
	
	say 19
	say 20
	say 21
//>

//<Part D
GROUP {Grp_TheBestGroup}:
	say a
	say b
	say c
	say d
	say e
	say f
	say g
	COND:
		say h
		say i
		say j
		say k
	say l
	COND:
		say m
		say n
		say o
		say p
		say q
		say r
		say s
		say t
	
GROUP {Grp_TheGreatestGroup}:
	say 1
	USE {END asdfasdf}:
		say 2
		say 3
		say 4
		say 5
		Func_goingToActivate
		say 6
	USE {BEG asdfasdf}:
		say 7
		say 8
		say 9
		say 10
		say 11
	USE {END NOSPACE asdfasdf}:
		say 12
		say 13
		say 14
		say 15
		say 16
	USE {BEG NOSPACE asdfasdf}:
		say 17
		say 18
		USE {EncapsulatedUse}:
			say 19
			say 20
		say 21
	say 22
	say 23
	say 24
	say 25
	say 26
	
	FUNC {Func_TestDefinition}:
		say ayy
		DEF $Apparently$ say (first |0|) (second |0;1|)
		say asdf
		$Apparently$(15)
	
	Func_TestDefinition(526)
	
	FUNC {Func_TestDefinition}:
		say FIRST
		FUNC {Func_TestDefinition2}:
			say |0| |1| SECOND
			say |0;1| |1;1| FIRST
			IF {|0| > 5}:
				say |0| > 5
		Func_TestDefinition2(5;10)
		say test
	
	Func_TestDefinition(1;2)
	
	UNASSIGN {FUNC Func_TestDefinition}
	Func_TestDefinition
	
	say 27
	say 28
	say 29
	say 30
	say 31
	say 32
	
	LOOP {33 40 + 1}:
		IF {|0| = 33}:
			say |0| ;
		IF {|0| > 33}:
			|0| ;
	
	
	tellraw @a {"text":"ayylmao"}
//>

//<Part E
GROUP {BLOCK stained_hardened_clay 11 CLOCK Grp_asdf}:
	COND:
		kill @p
		clear @p
		
	say CALC(2 ^ 31)
	say CALC(2 ^ 31 + 2 ^ 26)
	say CALC(2 * 3 + 4 * 5)
	
	DEF $TestSkipLine$ asdf \
		asdf \
		asdf \
		more asdf
		
	say $TestSkipLine$
	say rekt
	say rekt again
	
	/*
	say a
	b
///	c;
	d
	e
	*/
	
	LOOP {1 17 + 1} {(2 ^ 3) 1 - 0.5} {4096 1 / 2}:
		say |0|  |  |1|  |  |2|  ~  |3|
		LOOP {1 3 + 1}:
			say Current |0|
			say Previous |0;1|  |  |1;1|  |  |2;1|
			
///	porting over a random thing
	FUNC {Func_SpawnpointSystem}:
		DEF $Num$ 5

		DEF COORDS $Coords1$ 49 36 -45
		DEF TELE $CoordsTP1$ 49 36 -45 -90 0
		DEF $Event1$ Ice Race
		DEF $EventShort1$ ir
		DEF $EventC1$ aqua

		DEF COORDS $Coords2$ 75 7 -80
		DEF TELE $CoordsTP2$ 75 7 -80 90 0
		DEF $Event2$ Slow Race
		DEF $EventShort2$ sr
		DEF $EventC2$ gray

		DEF COORDS $Coords3$ 73 7 -102
		DEF TELE $CoordsTP3$ 73 7 -102 90 0
		DEF $Event3$ Nether Race
		DEF $EventShort3$ nr
		DEF $EventC3$ red

		DEF COORDS $Coords4$ 23 7 -133
		DEF TELE $CoordsTP4$ 23 7 -133 -90 0
		DEF $Event4$ Evil Race
		DEF $EventShort4$ evilr
		DEF $EventC4$ gray

		DEF COORDS $Coords5$ 218 18 -37
		DEF TELE $CoordsTP5$ 218 18 -37 -90 0
		DEF $Event5$ Diamond Race
		DEF $EventShort5$ dr
		DEF $EventC5$ aqua
		
		/*
		DEF $TextStart$ 
		{"text":"","extra":[
		{"text":"[","color":"gray"},
		{"text":"SP","color":"yellow","bold":"true",
			"hoverEvent":{"action":"show_text","value":{"text":"SpawnPoint System","color":"yellow"}},
			"clickEvent":{"action":"run_command","value":"/scoreboard players operation @p SPtp = cmd SPna"}
		},{"text":"]","color":"gray"},{"text":": "},
		*/
		
		LOOP {Test;String;Yee}:
			say |0|
		
		LOOP {1 $Num$ + 1}:
			tp @a[SPtp=|0|] $CoordsTP|0|$
			
			tellraw @a[SPtp=|0|]
			tellraw @a[m=2] $TextStart$
			
			/*
			tellraw @a[SPtp=|0|] $TextStart$
			{"text":"You have been teleported to ","color":"gray"},
			{"text":"$Coords|0|$","color":"yellow","bold":"true"},
			{"text":" at ","color":"gray"},
			{"text":"$Event|0|$","color":"$EventC|0|$","bold":"true",
				"clickEvent":{"action":"run_command","value":"/scoreboard players set @p SPtp |0|"},
				"hoverEvent":{"action":"show_text","value":{"text":"Teleport to $Event|0|$","color":"$EventC|0|$"}}
			},
			{"text":"!","color":"gray"}]}
			*/
			
		@a[SPtp>=1] playsound minecraft:entity.experience_orb.touch voice @a[c=1,SPtp>=1]
		@a[SPtp>=1] SPtp = 0
		/// say @a SIN(HellYeah)
		
	//=
	FUNC {Func_TestDefinitions}:
		DEF GLOBAL $Num$ 5

		DEF COORDS $Coords1$ 49 36 -45
		DEF TELE $CoordsTP1$ 49 36 -45 -90 0
		DEF $Event1$ Ice Race
		DEF $EventShort1$ ir
		DEF $EventC1$ aqua
		
		say $Num$
		say $Coords1$
		say $CoordsTP1$
		say $Event1$
		say $EventShort1$
		say $EventC1$
	=//
	
/// This actual mess actually parses into the correct damn thing
///	tl;dr if you don't know what you're doing with the execute shortcuts, there's pretty much no way you can mess this up
	@p ~ ~ ~ execute @a ~ ~ ~ @s @r stonebrick 0 ~ ~-1 ~ @e stonebrick * say @a
	execute @p ~ ~ ~ execute @a ~ ~ ~ execute @s ~ ~ ~ execute @r ~ ~ ~ detect ~ ~-1 ~ stonebrick 0 execute @e ~ ~ ~ detect ~ ~ ~ stonebrick * say @a
	
	execute @a ~ ~ ~ say test
	@a ~ ~ ~ say test
	@a say test
	@s @s @s kill @a[RRti>=1,testTag,kek>=1<=3]
	
	execute @a ~ ~ ~ detect ~ ~ ~ stonebrick 0 say test
	@a ~ ~ ~ detect ~ ~ ~ stonebrick 0 say test
	@a ~ ~ ~ detect stonebrick 0 say test
	@a detect ~ ~ ~ stonebrick 0 say test
	@a detect stonebrick 0 say test
	@a stonebrick 0 ~ ~ ~ say test
	@a stonebrick ~ ~ ~ say test
	@a stonebrick 0 say test
	@a stonebrick say test
	
	execute @a ~ ~ ~ detect ~ ~ ~ stonebrick * execute @a ~ ~ ~ detect ~ ~ ~ stonebrick * say test
	@a ~ ~ ~ detect ~ ~ ~ stonebrick * @a ~ ~ ~ detect ~ ~ ~ stonebrick * say test
	@a ~ ~ ~ detect stonebrick * @a ~ ~ ~ detect stonebrick * say test
	@a detect ~ ~ ~ stonebrick * @a detect ~ ~ ~ stonebrick * say test
	@a stonebrick * ~ ~ ~ @a stonebrick * ~ ~ ~ say test
	@a stonebrick * @a stonebrick * say test
	@a stonebrick @a stonebrick say test
	
	execute @a detect stonebrick 0 say test
	execute @a say test
	
/// except the following few of course
	@a not_a_block 0 say test
///	especially the following - it's just plain wrong wtf are you doing this isn't autocorrect
	execute @a ~ ~ ~ detect ~ ~ ~ stonebrick 0 ~ ~ ~ say test
	
	@e[type=ArmorStand,RRStand] ScOP @e[c=1,r=1,type=ArmorStand,RRStand] RRti = @e[c=1,r=1,type=ArmorStand,RRStand] RRti2
	@e[type=ArmorStand,RRStand] ScOP @e[c=1,r=1,type=ArmorStand,RRStand] RRti = 3 Number
	@e[type=ArmorStand,RRStand] RRti + 1 {DisabledSlots:2096896}
	@e[type=ArmorStand,RRStand] RRti - 1 {DisabledSlots:2096896}
	@e[type=ArmorStand,RRStand] RRti = 10 {DisabledSlots:2096896}
	@e[type=ArmorStand,RRStand] RRti ? RandNum
	@e[type=ArmorStand,RRStand] RRti ? 0 10
	@e[type=ArmorStand,RRStand] reset RRti
	@e[type=ArmorStand,RRStand] enable RRti
	@e[type=ArmorStand,RRStand] + RRTimer {Marker:1b}
	@e[type=ArmorStand,RRStand] - RRTimer {Marker:1b}
	J> RRd_y @e[type=ArmorStand,RRStand]
	L> @e[type=ArmorStand,RRStand]
	E> RRd_y
	
	Func_SpawnpointSystem
///	Func_TestDefinitions
	
	LOOP {m;c;name;test}:
		say @a[|0|=2]


	say
	say
	say
	tellraw @a {"text":"","extra":[{"text":"[","color":"gray"},{"text":"SP","color":"yellow","bold":"true","hoverEvent":{"action":"show_text","value":{"text":"SpawnPoint System","color":"yellow"}},"clickEvent":{"action":"run_command","value":"/scoreboard players operation @p SPtp = cmd SPna"}},{"text":"]","color":"gray"},{"text":": "},
	tellraw @a {"text":"","extra":[{"text":"[","color":"gray"},{"text":"SP","color":"yellow","bold":"true","hoverEvent":{"action":"show_text","value":{"text":"SpawnPoint System","color":"yellow"}},"clickEvent":{"action":"run_command","value":"/scoreboard players operation @p SPtp = cmd SPna"}},{"text":"]","color":"gray"},{"text":": "},{"text":"You have been teleported to ","color":"gray"},{"text":"$Coords|0|$","color":"yellow","bold":"true"},{"text":" at ","color":"gray"},{"text":"$Event|0|$","color":"$EventC|0|$","bold":"true","clickEvent":{"action":"run_command","value":"/scoreboard players set @p SPtp |0|"},"hoverEvent":{"action":"show_text","value":{"text":"Teleport to $Event|0|$","color":"$EventC|0|$"}}},{"text":"!","color":"gray"}]}
	
	@a {"text":"","extra":[{"text":"[","color":"gray"},{"text":"SP","color":"yellow","bold":"true","hoverEvent":{"action":"show_text","value":{"text":"SpawnPoint System","color":"yellow"}},"clickEvent":{"action":"run_command","value":"/scoreboard players operation @p SPtp = cmd SPna"}},{"text":"]","color":"gray"},{"text":": "},
	@a {"text":"","extra":[{"text":"[","color":"gray"},{"text":"SP","color":"yellow","bold":"true","hoverEvent":{"action":"show_text","value":{"text":"SpawnPoint System","color":"yellow"}},"clickEvent":{"action":"run_command","value":"/scoreboard players operation @p SPtp = cmd SPna"}},{"text":"]","color":"gray"},{"text":": "},{"text":"You have been teleported to ","color":"gray"},{"text":"$Coords|0|$","color":"yellow","bold":"true"},{"text":" at ","color":"gray"},{"text":"$Event|0|$","color":"$EventC|0|$","bold":"true","clickEvent":{"action":"run_command","value":"/scoreboard players set @p SPtp |0|"},"hoverEvent":{"action":"show_text","value":{"text":"Teleport to $Event|0|$","color":"$EventC|0|$"}}},{"text":"!","color":"gray"}]}
	
	

	
	USE {@a}:
		@e[type=ArmorStand,RRStand] ScOP @e[c=1,r=1,type=ArmorStand,RRStand] RRti = @e[c=1,r=1,type=ArmorStand,RRStand] RRti2
		@e[type=ArmorStand,RRStand] ScOP @e[c=1,r=1,type=ArmorStand,RRStand] RRti = 3 Number
		@e[type=ArmorStand,RRStand] RRti + 1 {DisabledSlots:2096896}
		@e[type=ArmorStand,RRStand] RRti - 1 {DisabledSlots:2096896}
		@e[type=ArmorStand,RRStand] RRti = 10 {DisabledSlots:2096896}
		@e[type=ArmorStand,RRStand] RRti ? RandNum
		@e[type=ArmorStand,RRStand] RRti ? 0 10
		@e[type=ArmorStand,RRStand] reset RRti
		@e[type=ArmorStand,RRStand] enable RRti
		@e[type=ArmorStand,RRStand] + RRTimer {Marker:1b}
		@e[type=ArmorStand,RRStand] - RRTimer {Marker:1b}
		J> RRd_y @e[type=ArmorStand,RRStand]
		L> @e[type=ArmorStand,RRStand]
		E> RRd_y
	
	ayylmao RRti + 1 {DisabledSlots:2096896}
	ayylmao RRti - 1 {DisabledSlots:2096896}
	ayylmao RRti = 10 {DisabledSlots:2096896}
	ayylmao RRti ? 3
	ayylmao RRti ? 0 10
	ayylmao reset RRti
	ayylmao enable RRti
	ayylmao + RRTimer {Marker:1b}
	ayylmao - RRTimer {Marker:1b}
	J> RRd_y ayylmao
	L> ayylmao
	E> RRd_y
	
	tellraw @a[TSToken>=1,SPtsc<=1,SPtsn=10] {"text":"","extra"[{"text":"You have submitted 10 incorrect answers, and have 0 tries left.","color":"gray"}]}
	scoreboard players operation @p SPtp = 3 Number
	
	DEF $SA$ x=-153,y=0,z=299,dx=158,dy=110,dz=168
	tellraw @a {"selector":"@a[$SA$,asdf=5]"}
	effect @a[$SA$,m=2,RRci=0,RRar=1] 11 1 0 true
	effect @a[$SA$,m=2,RRci=0,RRar>=1<=2] 7 1 1 true
	
	say @a[$SA$,m=2,RRar>=3<=5] @a[OMG_WORK>=3<5] @a[OMG_WORK>=3] 3
	say @a[OMG_WORK<=5>=3] @a[OMG_WORK<=5>3] @a[OMG_WORK<=3]
	say @a[OMG_WORK>3<=5] @a[OMG_WORK>3<5] @a[OMG_WORK>3]
	say @a[OMG_WORK<5>=3] @a[OMG_WORK<5>3] @a[OMG_WORK<3]
	
	$test$
	
	DEF $test$ say test
	DEF $test$ say test2
	
	$test$
	UNASSIGN {DEF $test$}
	$test$
	UNASSIGN {DEF $test$}
	$test$
	
	FUNC {GLOBAL Func_AyyLmao}:
		say ayy
		say lmao
		
	Func_AyyLmao
	
	FUNC {Func_AyyLmao}:
		say lmao compared to ayy
	
	Func_AyyLmao
	
	UNASSIGN {FUNC GLOBAL Func_AyyLmao}
	Func_AyyLmao
	
///	the following will result in an error
///	say @a[name>=3>5]
///	say @a[name<=3<5]
///	say @a[name>5>=3]
///	say @a[name<5<=3]
	
	SPLIT {GLOBAL Arr_RandName Strin g asd fsf} { } {s}
	say Arr_RandName[S]
	
	ARRAY {ACTIVATE CCU.objectiveAdd(Obj_GeneralScoreboardStart) Obj_GeneralScoreboardStart}:
		RRti dummy Royal Rumble Timer
		RRpl dummy Royal Rumble Player List
		
///	CCU.objectiveAdd(Arr_GeneralScoreboardStart)
	say test
	
	CCU.objectiveRemove(Obj_GeneralScoreboardStart)
	
	ARRAY {ACTIVATE CCU.teamAdd(Team_GeneralScoreboardStart) Team_GeneralScoreboardStart}:
		RRg RR Green
		OPT RRg color green
		OPT RRg nametagVisibility hideForOtherTeams
		OPT RRg friendlyfire false
	
		RRb RR Blue
		OPT RRb color blue
		OPT RRb nametagVisibility hideForOtherTeams
		OPT RRb friendlyfire false
		
	CCU.teamRemove(Team_GeneralScoreboardStart)

	fill Grp_asdf air 0
//>

//<Part F
GROUP {Grp_TestingDocumentation}:
	ARRAY {COORDS Arr_Name}:
		-62.43 14 421.6
		-64.43 14 421.6
		-66.43 14 421.6
		-68.43 14 421.6
		-68.4 14 415.6
		-66.4 14 415.6
		-64.4 14 415.6
		
///	Gets '-68.43 14 421.6'
	say Arr_Name[3]

///	Gets '-62.43 14 421.6;-64.43 14 421.6;-66.43 14 421.6;-68.43 14 421.6;-68.4 14 415.6;-66.4 14 415.6;-64.4 14 415.6'
	say Arr_Name[S]

///	Gets '7'
	say Arr_Name[L]


	ARRAY {GLOBAL Arr_Test}:
		{
			element1
			element2
			element3
		} {
			element1_1
			NULL
			element1_3
		}

///	Gets 'element1_3'
	say Arr_Test[1][2]
	
///	Returns 'element1_1;;element1_3'
	say Arr_Test[1][S]
	
///	Returns '2'
	say Arr_Test[0][L]
	
///	Returns '6'
	say Arr_Test[L][L]
	
///	Returns '1'
	say Arr_Test[L]
	
	LOOP {1 10 + 1}:
		IF {|0| = 1}:
			say |0| ;
		IF {|0| > 1}:
			|0| ;
	LOOP {1 10 + 1}:
		IF {|0| != 5}:
			say |0| != 5
	IF {asdf != asdf}:
		say asdf != asdf
	IF {asdf != asdf2}:
		say asdf != asdf2
	
	
	IMPORT {GETCOORDS C:\Users\Austin\Documents\Austin\powder game code\eGO\Events & Commands\PC - Pictionary\Pictionary_dat.txt}
	setblock Pictionary.Grp_MainStart redstone_block 0
	
	DEF $RandString$ This is a random string
	SPLIT {Arr_Temp $RandString$} { } {d}
	
///	Returns 'This;is;a;ran;om;string'
	say Arr_Temp[S]
	
///	Returns '6'
	say Arr_Temp[L]
	
//>

//<Part sqrt(G)
//= King cat made a lookup table for square roots up to score 39800 --> 199 so I'm going to try to replicate that
scoreboard players set @s[score_KCC.sqrt.sqrt_min=1,score_KCC.sqrt.sqrt=2] KCC.sqrt.sqre 1
scoreboard players set @s[score_KCC.sqrt.sqrt_min=3,score_KCC.sqrt.sqrt=6] KCC.sqrt.sqre 2
scoreboard players set @s[score_KCC.sqrt.sqrt_min=7,score_KCC.sqrt.sqrt=12] KCC.sqrt.sqre 3
scoreboard players set @s[score_KCC.sqrt.sqrt_min=13,score_KCC.sqrt.sqrt=20] KCC.sqrt.sqre 4
scoreboard players set @s[score_KCC.sqrt.sqrt_min=21,score_KCC.sqrt.sqrt=30] KCC.sqrt.sqre 5
scoreboard players set @s[score_KCC.sqrt.sqrt_min=31,score_KCC.sqrt.sqrt=42] KCC.sqrt.sqre 6
scoreboard players set @s[score_KCC.sqrt.sqrt_min=43,score_KCC.sqrt.sqrt=56] KCC.sqrt.sqre 7
scoreboard players set @s[score_KCC.sqrt.sqrt_min=57,score_KCC.sqrt.sqrt=72] KCC.sqrt.sqre 8
scoreboard players set @s[score_KCC.sqrt.sqrt_min=73,score_KCC.sqrt.sqrt=90] KCC.sqrt.sqre 9
=//

//=
GROUP {Grp_TestingSqrt}:
///	Custom min / max score
	DEF GLOBAL $GetMin$ 1
	DEF GLOBAL $GetMax$ 40000
	
///	For calculations
	DEF GLOBAL $CurrentResult$ $GetMin$
	DEF GLOBAL $PreviousMinScore$ $GetMin$
	
	LOOP {$GetMin$ $GetMax$ + 1}:
		
		DEF GLOBAL $PreviousResult$ $CurrentResult$
		DEF GLOBAL $CurrentResult$ INT(|0;1| ^ 0.5)
		
		IF {$CurrentResult$ > $PreviousResult$}:
			@s[KCC.sqrt.sqrt>=$PreviousMinScore$<|0|] KCC.sqrt.sqre = $PreviousResult$
			DEF GLOBAL $PreviousMinScore$ |0;1|
		
		
=//
//>















