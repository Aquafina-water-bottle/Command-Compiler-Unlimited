//(Testing)
///	C:\Users\Austin\Documents\Austin\powder game code\eGO\Events & Commands\CCU - Command Combiner Unlimited\tests\test.ccu

//<Definitions
IMPORT {GETDIR GETCOORDS C:\Users\Austin\Documents\Austin\powder game code\eGO\CCU Events}

DEF ASDF DANK
DEF DANK MEMES 5
DEF GLOBAL aFloat 3333333333.1111111111111111111111
DEF GLOBAL COORDS $DankCoords$ 3.11 ~ 0.0000
DEF GLOBAL TELE $DankCoords$ -301 51 930.0 40 0
DEF RandNum 5
DEF ScOP scoreboard players operation
DEF $test$ ScOP @p TEST
DEF $test$ $test$ @p SPtp

DEF def1 def2
DEF def2 def3

DEF $mod$ 0.4

DEF recurring_asdf aRecurringDefinition
DEF aRecurringDefinition aSecondRecurringDefinition
DEF aSecondRecurringDefinition yeah this is recurring_asdf

FUNC {GetRandFunc1}:
	say 1
	say |0|
	say |2|
	
FUNC {GetRandFunc2}:
	say 4
	say 5
	say 6
//>

//<Options	
OPTIONS:
	blockOption stonebrick 0
	coordsOption 383 69 95

OPTIONS:
///	Style
///	Avaliable options: +X -X +Z -Z (and) height in y
	styleOption +X 16
///	Parse, cmd, compiler
	parseOption true
	commandOption true
	combinerOption true
	filePathFuncOption C:\Users\Austin\Documents\Austin\powder game code\eGO\Server Stuff\1.12\world\data\functions\custom
///	Filepath to MCFunctions
/// Preserve coordinates for each group
	parseChangesOption false
//>

//<Part Fibonacci
GROUP {Grp_TestingDocumentation}:
	say CALC((1))
	say CALC(1)
	
	say CALC((82 + 5))
	say CALC((82 + 5) * 2)
	say CALC((87) * 2)
	say CALC(82 + 5 * 2)
	say CALC(82 * 2)
	say CALC(1 / 2)
	say CALC((1 / 2))
	say INT((1 / 2))
	
	
	say CALC(3 + (1.0 / 3)) /// returns with 'say 3.33333333333333'
	say CALC(3.0 + CALC(1 / 3)) /// returns with 'say 3.33333333333333'
	say CALC(3 + 10.0 / 3) /// returns with 'say 6.33333333333333'
	say CALC(3.0 + 10 / 3) /// returns with 'say 6.33333333333333'
	say CALC(3 + 10 / 3) /// returns with 'say 6' (rounded from 6.33)
	say CALC(3 + 11 / 3) /// returns with 'say 7' (rounded from 6.66)
	say CALC(3 + DEC(1 / 3)) /// returns with 'say 3.33333333333333'
	say DEC(3 + (1 / 3)) /// returns with 'say 3.33333333333333'
	say INT(3.0 + DEC(10 / 3)) /// returns with 'say 6' (rounded from 6.33)
	say INT(3.0 + 10.0 / 3.0) /// returns with 'say 6' (rounded from 6.33)
	
	say SIN(30.0) = CALC(1.0 / 2) = 1/2
	say COS(30.0) = CALC(3 ^ (0.5) / 2) = sqrt(3)/2
	say TAN(30.0) = CALC(1 / (3 ^ 0.5)) = 1/sqrt(3)
//>










