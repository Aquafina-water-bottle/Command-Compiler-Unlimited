//(Name)

//<Options
OPTIONS:
	parseOption true
	commandOption false
	combinerOption false
	filePathFuncOption C:\Users\Austin\Documents\Austin\powder game code\eGO\Server Stuff\1.12.1\world\data\functions\test
	deleteFunctionFolderOption true
//>

//<Array Test
GROUP {PULSE Grp_ArrayTest}:
	FUNC {Func_RandomArray}:
		LOOP {(|0|) (|0| + 5) + 1}:
			|0|

	ARRAY {Arr_Test}:
		Func_RandomArray(3)
		ARRAY {Arr_Test}:
			Func_RandomArray(5)
		asdf Arr_Test[S] Arr_Test[L]

	say Arr_Test[S]

//>

//<Groups
FUNC {PARSESEP CCU.varsInit}:
	LOOP {ARGS[S]}:
		SPLIT {MAX 1 Arr_Temp |0|} { }
		IF {Arr_Temp[0] = PARSE(Arr_Temp[0])}: /// meaning there is no definition
			DEF GLOBAL Arr_Temp[0] Arr_Temp[1]

FUNC {CCU.setClassVars}:
	IF {|0| = ``}:
		LOOP {ARGS[S]}:
			DEF GLOBAL self.|0;1| PARSE(|0;1|)
			UNASSIGN {DEF |0|}
	ELSE:
		LOOP {ARGS[S]}:
			DEF GLOBAL |0;2|.|0;1| PARSE(|0;1|)
			UNASSIGN {DEF |0|}
	
GROUP {PULSE Grp_Test}:
	say 1
	COND:
		@a[RRtp=3] Grp_MainStart
		Grp_MainStart if @a[RRtp=3]
		DEF $CondTest$ 3
		LOOP {1 3 + 1}:
			say |0| - $CondTest$
			DEF $CondTest$ 5
		say $CondTest$
	say $CondTest$
		
	
MFUNC {main Grp_MainStart}:

	FUNC {PARSESEP CCU.test}:
		LOOP {ARGS[S]}:
			say |0|
			
	FUNC {PARSESEP CCU.test2}:
		say ARGS[S]
		ARRAY {TEMP ARGS}:
			1
			2
			3
		PRINT ARGS[S]
		CCU.test()
	
	ARRAY {TEMP ARGS}:
		a
		b
		c
	CCU.test2()
	
///	DEF GLOBAL $CCURandDynamicMin$ 100
	DEF GLOBAL $CCURandDynamicMax$ 100
	
	say $CCURandDynamicMin$ - $CCURandDynamicMax$
	
	say Arr_Temp[S]
	ARRAY {GLOBAL ACTIVATE CCU.varsInit() ARGS}:
		`$CCURandDynamicMin$` 3
		`$CCURandDynamicMax$` 5
		
	say Arr_Temp[S]
		
	say $CCURandDynamicMin$ - $CCURandDynamicMax$
	
	ARRAY {GLOBAL ACTIVATE CCU.setClassVars(asdf) ARGS}:
		`$CCURandDynamicMin$`
		`$CCURandDynamicMax$`
		
	say $CCURandDynamicMin$ - $CCURandDynamicMax$
	say self.$CCURandDynamicMin$ - self.$CCURandDynamicMax$
	say asdf.$CCURandDynamicMin$ - asdf.$CCURandDynamicMax$
	
	//=
	DEF $TextStart$ say $Test$ nou
	DEF $Test$ 3
	
	say $Test$ asdf $TextStart$
	say $TextStart$ asdf $Test$
	=//
	
	//=
	DEF $Asdf$ CALC(3 + 1)
	PRINT $Asdf$
	CCU.instantCalc(`$Asdf$`)
	PRINT $Asdf$
	=//
	
	//=
	SPLIT {Arr_SplitTest AString} { }
	say Arr_SplitTest[0]
	=//
	
	
//>


